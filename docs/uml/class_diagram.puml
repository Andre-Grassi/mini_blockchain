@startuml class_diagram 
skinparam classAttributeIconSize 0
hide circle
skinparam Shadowing false

class Block {
  #balance: float {readonly}
  #hash: String {readonly}
  #operation: Operation {readonly}
  #ownerName: String {readonly}

  +to_dict(): dict
}

class AccCreationBlock {
  -ownerName: String {readonly}
  -creationTime: Time {readonly}
}

Block <|-- AccCreationBlock


class NetworkNode {
  #socket: Socket {readonly}
  #bufferSize: unsigned int {readonly}
  +close: void
  +parse_message(message: String): (String, float)
}

class Client {
  -name: String {readonly}
  -balance: float
  +connectTo(serverIp: String, serverPort: int): void
  +deposit(amount: float)
  +withdraw(amount: float)
}

class Server {
  -ip: String {readonly}
  -port: int {readonly}
  ' A segunda string é o nome do cliente
  -clients: map(String, String) {readonly}
  +deposit(amount: float)
  +withdraw(amount: float)
  +computeHash(block: Block, lastHash: String): String
  +computeGenesisHash(block: Block): String
' A validação só é feita pelo servidor
  +bind_socket(): void
  -getOwnIP(): String
  -validateWithdrawal(amount: float, ownerName: float)
  -getBalance(clientName: String): float
}

NetworkNode <|-- Client
NetworkNode <|-- Server

' BlockChain
Server *--> "many" Block

' O Server tem um atributo que mapeia por string os clientes map(String) = NomeCliente
Server "1"--"many" Client 
@enduml